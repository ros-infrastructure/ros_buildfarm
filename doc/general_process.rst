Configuring a Jenkins based ROS Buildfarm
=========================================

This documents the process for setting up the ROS buildfarm.
It will require you to customize several configuration files.
There is documentation for how to modify the configuration files `at the root<index.rst>`_.

As a reminder this document also assumes that you have successfully completed a `buildfarm_deployment <https://github.com/ros-infrastructure/ros_buildfarm_config>`_ and have the infrastructure already running.


You will have to do three main steps:

* Define your configuration.
* Deploy your configuration onto Jenkins.
* Bootstrap and ongoing administration.

Create your configuration
-------------------------

The ros_buildfarm is designed to be configurable.
To hold these configurations we use the ros_buildfarm_config repository.

First you need to either fork the
`ros_buildfarm_config <https://github.com/ros-infrastructure/ros_buildfarm_config>`_
repository or create a repository containing these configuration files.


Deploy your configuration
-------------------------

There are several specific dependencies needed to deploy to the jenkins below they are itemized.

If you would prefer to use a docker container
`this <https://github.com/tfoote/buildfarm_inprogress_helpers>`_ repository
which will set up the described environment for you inside a Docker container and you can skip the setup below.


Setup your machine to configure Jenkins
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


For generating Jenkins jobs you need the following software:

* Python 3
* Python 3 package ``empy``
* Python 3 ROS package ``rosdistro`` >= 0.4.0
* a checkout of the `ros_buildfarm <https://github.com/ros-infrastructure/ros_buildfarm) repository>`_
* a forked version of `jenkinsapi <https://github.com/dirk-thomas/jenkinsapi/tree/feature/config_view>`_

E.g. using the following commands on Ubuntu Trusty::

  sudo apt-get update && sudo apt-get install python3 python3-all python3-pip

  mkdir /tmp/deploy_ros_buildfarm
  cd /tmp/deploy_ros_buildfarm
  pyvenv-3.4 --without-pip venv
  . venv/bin/activate
  # workaround for https://bugs.launchpad.net/ubuntu/+source/python3.4/+bug/1290847
  curl https://bootstrap.pypa.io/get-pip.py | /tmp/env/bin/python3
  pip3 install empy
  pip3 install rosdistro
  pip3 install git+git://github.com/dirk-thomas/jenkinsapi.git@feature/config_view

  git clone https://github.com/ros-infrastructure/ros_buildfarm.git
  cd ros_buildfarm
  export PYTHONPATH=`pwd`:$PYTHONPATH

Create the file ``~/.buildfarm/jenkins.ini`` containing your credentials to log
in to the Jenkins master, e.g.::

  [jenkins_hostname.example.com]
  username=admin
  password=changeme



Generate the Jenkins jobs
^^^^^^^^^^^^^^^^^^^^^^^^^

To generate the administrative jobs invoke the following commands pointing to
the URL of your buildfarm configuration::

  /tmp/deploy_ros_buildfarm/ros_buildfarm/scripts/generate_all_jobs.py https://raw.githubusercontent.com/YOUR_FORK/ros_buildfarm_config/master/index.yaml



Run bootstrap administrative tasks
----------------------------------

Log in as the *admin* user to the Jenkins master.


Import packages
^^^^^^^^^^^^^^^

Run the following jobs from the *Manage* view:

* ``import_upstream`` to get all the required bootstrap packages into the
repository


rosdistro cache
^^^^^^^^^^^^^^^

You can disable the following jobs if you are not using a forked rosdistro
database:

* ``*_rosdistro-cache``

Otherwise trigger each ``rosdistro-cache`` job once and verify that it uploaded
the generated cache files successfully to:
http://repo_hostname.example.com/rosdistro_cache/


Generate devel / release / doc jobs
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Run the following jobs from the *Manage* view:

* ``*__reconfigure-jobs`` to generate all the jobs



Ongoing operations
------------------

Generated jobs
^^^^^^^^^^^^^^

All management related jobs are shown in the ``Manage`` view in Jenkins.

The reconfiguration jobs are automatically retriggered (some frequently, others
daily) to make sure to create jobs for newly added packages and repositories
and remove obsolete jobs for removed packages and repositories.

For each build file a corresponding view contains all jobs generated by that
build file.
Each job type uses a different triggering mechanisms.
For details please see the job specific documentation pages referenced from the
index page.

Monitoring
^^^^^^^^^^

You might want to check:

* the output of the ``dashboard`` job to get an overview about the status of all
jobs

* the generated status pages http://REPO_HOSTNAME/status_page/ to see the
progress of the generated packages


Manually sync packages
^^^^^^^^^^^^^^^^^^^^^^


Whenever you want to sync the current state of packages from the ``testing`` to
the ``main`` repository you must manually invoke the corresponding
``sync-packages-to-main`` job.


Users using your custom binary packages
---------------------------------------

The users must replace the original ROS repository in their APT sources files
with the URL of your ``repo`` host in order to use your binary packages.

They should also update their ROSDISTRO_INDEX_URL to point to the configured one so as to use the updated cache build by this buildfarm.


Releasing into a custom rosdistro
---------------------------------

It is possible to release directly into the last rosdistro file in the ROSDISTRO index file.
Bloom will choose the last element of the ROSDISTRO_INDEX distribution list.
